{"ast":null,"code":"import { openDB } from 'idb';\nconst dbName = 'todo-app-db';\nconst version = 1;\nexport const initDB = async () => {\n  return openDB(dbName, version, {\n    upgrade(db) {\n      const taskStore = db.createObjectStore('tasks', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n      taskStore.createIndex('by-status', 'status');\n      taskStore.createIndex('by-label', 'labels', {\n        multiEntry: true\n      });\n      const labelStore = db.createObjectStore('labels', {\n        keyPath: 'name'\n      });\n    }\n  });\n};\nexport const dbPromise = initDB();","map":{"version":3,"names":["openDB","dbName","version","initDB","upgrade","db","taskStore","createObjectStore","keyPath","autoIncrement","createIndex","multiEntry","labelStore","dbPromise"],"sources":["C:/Users/OWNER/Desktop/todo-app/src/db/index.ts"],"sourcesContent":["import { openDB, DBSchema, IDBPDatabase } from 'idb';\r\n\r\ninterface TodoDB extends DBSchema {\r\n  tasks: {\r\n    key: number;\r\n    value: {\r\n      id?: number;\r\n      title: string;\r\n      description: string;\r\n      status: 'not_started' | 'in_progress' | 'completed';\r\n      labels: string[];\r\n      createdAt: Date;\r\n      updatedAt: Date;\r\n    };\r\n    indexes: {\r\n      'by-status': string;\r\n      'by-label': string;\r\n    };\r\n  };\r\n  labels: {\r\n    key: string;\r\n    value: {\r\n      name: string;\r\n      color: string;\r\n    };\r\n  };\r\n}\r\n\r\nconst dbName = 'todo-app-db';\r\nconst version = 1;\r\n\r\nexport const initDB = async (): Promise<IDBPDatabase<TodoDB>> => {\r\n  return openDB<TodoDB>(dbName, version, {\r\n    upgrade(db) {\r\n      const taskStore = db.createObjectStore('tasks', {\r\n        keyPath: 'id',\r\n        autoIncrement: true,\r\n      });\r\n      taskStore.createIndex('by-status', 'status');\r\n      taskStore.createIndex('by-label', 'labels', { multiEntry: true });\r\n\r\n      const labelStore = db.createObjectStore('labels', {\r\n        keyPath: 'name',\r\n      });\r\n    },\r\n  });\r\n};\r\n\r\nexport const dbPromise = initDB(); "],"mappings":"AAAA,SAASA,MAAM,QAAgC,KAAK;AA4BpD,MAAMC,MAAM,GAAG,aAAa;AAC5B,MAAMC,OAAO,GAAG,CAAC;AAEjB,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAA2C;EAC/D,OAAOH,MAAM,CAASC,MAAM,EAAEC,OAAO,EAAE;IACrCE,OAAOA,CAACC,EAAE,EAAE;MACV,MAAMC,SAAS,GAAGD,EAAE,CAACE,iBAAiB,CAAC,OAAO,EAAE;QAC9CC,OAAO,EAAE,IAAI;QACbC,aAAa,EAAE;MACjB,CAAC,CAAC;MACFH,SAAS,CAACI,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC;MAC5CJ,SAAS,CAACI,WAAW,CAAC,UAAU,EAAE,QAAQ,EAAE;QAAEC,UAAU,EAAE;MAAK,CAAC,CAAC;MAEjE,MAAMC,UAAU,GAAGP,EAAE,CAACE,iBAAiB,CAAC,QAAQ,EAAE;QAChDC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,SAAS,GAAGV,MAAM,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}